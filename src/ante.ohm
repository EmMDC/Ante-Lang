Ante {
  Program     = Statement+

  Statement   = VarDecl
              | AllInVarDecl
              | FunDecl
              | Exp ("++" | "--") ";"                         --bump
              | Exp "=" Exp ";"                               --assign
              | Exp_call ";"                                  --call
              | raise Exp ";"                                 --raise
              | break ";"                                     --break
              | return Exp ";"                                --return
              | return ";"                                    --shortreturn
              | IfStmt
              | LoopStmt

  VarDecl     = hand id "=" (Exp | Object) ";"
  AllInVarDecl = all_in id "=" (Exp | Object) ";"
  FunDecl     = deal id Params ":" Block
  Params      = "(" ListOf<Param, ","> ")"
  Param       = id
  Block       = Statement*

  IfStmt      = if Exp ":" Block else ":" Block                       --long
              | if Exp ":" Block else IfStmt                                 --elsif
              | if Exp ":" Block                                             --short

  LoopStmt    = while Exp ":" Block                               --while
              | for id in TurnCall ":" Block                 --range
              | for id in Exp ":" Block                     --collection

  TurnCall    = turn "(" ListOf<Exp, ","> ")"
  
  Exp         = Object
              | Exp ("or" Exp)+                              --or
              | Exp ("and" Exp)+                             --and
              | Exp ("<=" | "<" | "==" | "!=" | ">=" | ">") Exp         --compare
              | Exp ("+" | "-") Exp                         --add
              | Exp ("*" | "/" | "%") Exp                     --multiply
              | Exp "**" Exp                                --power
              | ("-" | "!") Exp                             --unary
              | true
              | false
              | floatlit
              | intlit
              | Exp "(" ListOf<Exp, ","> ")"                 --call
              | Exp "[" Exp "]"                             --subscript
              | Exp "." id                                  --member
              | stringlit
              | id
              | "[" ListOf<Exp, ","> "]"                     --arrayexp
              | "(" Exp ")"                                 --parens

  Object      = "{" ListOf<Member, ","> "}"
  Member      = id ":" Exp

  intlit      = digit+
  floatlit    = digit+ "." digit+ (("E" | "e") ("+" | "-")? digit+)? 
  stringlit   = "\"" char* "\""
  char        = ~control ~"\\" ~"\"" any
              | "\\" ("n" | "t" | "\"" | "\\")             --escape
              | "\\u{" hex hex? hex? hex? hex? hex? "}"      --codepoint
  control     = "\x00".."\x1f" | "\x80".."\x9f"
  hex         = hexDigit

  hand        = "hand" ~alnum
  deal        = "deal" ~alnum
  if          = "if" ~alnum
  else        = "else" ~alnum
  while       = "while" ~alnum
  for         = "for" ~alnum
  in          = "in" ~alnum
  break       = "break" ~alnum
  return      = "return" ~alnum
  true        = "true" ~alnum
  false       = "false" ~alnum
  raise       = "raise" ~alnum
  turn        = "turn" ~alnum
  all_in      = "all in" ~alnum

  keyword     = hand | deal | if | else | while | for | in 
              | break | return | true | false | raise | turn | all_in
  id          = ~keyword letter alnum*
  
  space      += "//" (~"\n" any)*                             --comment
              | "--" (~"--" any)* "--" "\n"                   --multilinecomment
}
