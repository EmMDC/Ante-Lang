Ante {
  Program = Statement+

  Statement = VarDecl
            | AllInVarDecl
            | FunDecl
            | Exp ("++" | "--") ";"    --bump
            | Exp "=" Exp ";"            --assign
            | Exp_postfix_call ";"                  --call
            | break ";"                    --break
            | return Exp ";"               --return
            | return ";"                   --shortreturn
            | IfStmt
            | LoopStmt

  VarDecl     = hand id "=" (Exp | Object) ";"
  AllInVarDecl = all_in id  "=" (Exp | Object) ";"
  FunDecl     = deal id Params ReturnAnnot? ":" Statement+ fold
  Params      = "(" ListOf<Param, ","> ")"
  Param       = id TypeAnnot?
  TypeAnnot   = ":" TypeUnion
  ReturnAnnot = "->" TypeUnion

  TypeUnion = Type ("|" Type)*
  Type        = "Int" | "Float" | "Bool" | "String" | "Any" 
                | "[" Type "]" -- array

  IfStmt = if Exp ":" Statement+ else ":" Statement+  fold    --ifelse
         | if Exp ":" Statement+ else IfStmt               --elsif
         | if Exp ":" Statement+ fold                       --short

  LoopStmt = while Exp ":" Statement+ fold                --while
           | for id in TurnCall ":" Statement+ fold        --range
           | for id in Exp ":" Statement+ fold            --collection

  TurnCall = turn "(" ListOf<Exp, ","> ")"

  Exp = Exp ("<=" | "<" | "==" | "!=" | ">=" | ">") Exp_or  --compare
              | Exp_or

  Exp_or = Exp_or "or" Exp_and    --or
         | Exp_and

  Exp_and = Exp_and "and" Exp_add  --and
          | Exp_add

  Exp_add = Exp_add ("+" | "-") Exp_mul  --add
          | Exp_mul

  Exp_mul = Exp_mul ("*" | "%%" | "%" | "/") Exp_power  --multiply
          | Exp_power

  Exp_power = Exp_unary "**" Exp_power  --power
            | Exp_unary

  Exp_unary = ("-" | "!" | random) Exp_unary  --unary
            | Exp_postfix

  Exp_postfix = Exp_postfix "(" ListOf<Exp, ","> ")"  --call
              | Exp_postfix "[" Exp "]"                --subscript
              | Exp_postfix "." id                       --member
              | Exp_primary

  Exp_primary = true
              | false
              | floatlit
              | intlit
              | stringlit
              | id
              | "[" ListOf<Exp, ","> "]"               --arrayexp
              | "(" Exp ")"                           --parens
              | Object

  Object      = "{" ListOf<Member, ","> "}"
  Member      = id ":" Exp

  intlit      = digit+
  floatlit    = digit+ "." digit+ (("E" | "e") ("+" | "-")? digit+)? 
  stringlit   = "\"" char* "\""
  char        = ~control ~"\\" ~"\"" any
              | "\\" ("n" | "t" | "\"" | "\\")             --escape
              | "\\u{" hex hex? hex? hex? hex? hex? "}"      --codepoint
  control     = "\x00".."\x1f" | "\x80".."\x9f"
  hex         = hexDigit

  fold        = "FOLD" ~alnum
  hand        = "hand" ~alnum
  deal        = "deal" ~alnum
  if          = "if" ~alnum
  else        = "else" ~alnum
  while       = "while" ~alnum
  for         = "for" ~alnum
  in          = "in" ~alnum
  break       = "break" ~alnum
  return      = "return" ~alnum
  true        = "true" ~alnum
  false       = "false" ~alnum
  turn        = "turn" ~alnum
  all_in      = "all in" ~alnum
  random      = "random" ~alnum

  keyword     = hand | deal | if | else | while | for | in 
              | break | return | true | false | turn | all_in | fold | random
  id          = ~keyword letter alnum*
  
  comment = "//" (~"\n" any)* "\n" 
        | "$$" (~"$$" any)* "$$"

  space += comment

}